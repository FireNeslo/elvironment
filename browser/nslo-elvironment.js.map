{"version":3,"file":"nslo-elvironment.js","names":[],"mappings":"","sources":["nslo-elvironment.js"],"sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var n;\"undefined\"!=typeof window?n=window:\"undefined\"!=typeof global?n=global:\"undefined\"!=typeof self&&(n=self),n.nsloElvironment=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nfunction tags(func) {'use strict';\n\tif(func.$inject) return func.$inject;\n\treturn (func.$inject = func.length ? func.toString().match(/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m)[1].replace(/ /g, '').split(',') : []);\n}\nvar Element = require('./lib/element');\nvar Attributes = require('./lib/attributes');\n/**\n * @module nslo-elvironment\n * @param {function} cb - element environment\n **/\nfunction elviroment(cb) {'use strict';\n\treturn cb.apply(Element, tags(cb).map(function(tag) {\n\t\treturn function el() {\n\t\t\tvar element = new Element(tag);\n\t\t\tArray.prototype.forEach.call(arguments, function(val) {\n\t\t\t\tif(Array.isArray(val)) {\n\t\t\t\t\telement.children(val);\n\t\t\t\t} else if(typeof val === 'string') {\n\t\t\t\t\tshortcut(element, val);\n\t\t\t\t} else if(val instanceof Element) {\n\t\t\t\t\telement.children([val]);\n\t\t\t\t} else if(typeof val === 'object') {\n\t\t\t\t\tAttributes.prototype.map.call(val,function(value, key) {\n\t\t\t\t\t\telement.attr(key, value);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn element;\n\t\t};\n\t}));\n}\nelviroment.Element = Element;\nelviroment.Attributes = Attributes;\n\nfunction attribute(attr) {'use strict';\n\treturn function(element, val) { return element.attr(attr, val);};\n}\nfunction classes(element, val) {'use strict';\n\treturn element.attr('class', val.replace('.',' ')); \n}\nvar shortcuts = [\n\t{shortcut:'.',action:classes}, \n\t{shortcut:'#',action:attribute('id')}, \n\t{shortcut:':',action:attribute('type')},\n\t{shortcut:'=',action:attribute('value')},\n\t{shortcut:'@',action:attribute('name')},\n\t{shortcut:'>',action:attribute('href')}\n];\nfunction shortStrings(shortcut) {'use strict';\n\treturn ''+shortcut.shortcut;\n}\nfunction shortcut(element, value) {'use strict';\n\tvar short = null, action = null;\n\tfor (var i = 0; i < shortcuts.length; i++) {\n\t\tshort = shortcuts[i].shortcut;\n\t\taction   = shortcuts[i].action;\n\t\tif((short instanceof RegExp && short.test(value)) || value.indexOf(short) === 0) {\n\t\t\tif(typeof short === 'string') {\n\t\t\t\tvalue = value.replace(short, '');\t\n\t\t\t}\n\t\t\treturn action(element, value);\n\t\t}\n\t}\n\telement.text(value);\n}\n/**\n * Adds a shortcut\n * @param {string|regexp} shortcut - prefix or expression to activate action (prefixes are removed) \n * @param {function} \t\t\taction   - action to invoke on shortcut\n **/\nelviroment.shortcut = function(shortcut, action) {'use strict';\n\tvar value = {shortcut:shortcut, action:action};\n\tvar index = shortcuts.map(shortStrings).indexOf(shortcut.toString());\n\tif(index > -1) shortcuts[index] = value;\n\telse shortcuts.push(value);\n};\n\nmodule.exports= elviroment;\n},{\"./lib/attributes\":2,\"./lib/element\":3}],2:[function(require,module,exports){\n\n/**\n * Attributes helper\n * @class \n **/\nfunction Attributes() {}\n/**\n * map over attributes\n * @param {function} cb - mapping callback\n **/\nAttributes.prototype.map = function(cb) {'use strict';\n    return Object.keys(this).map(function(key) { return cb(this[key], key);}, this);\n};\n/**\n * make attributes string\n **/\nAttributes.prototype.toString = function() {'use strict';\n  var attrs = this.map(function(value, key) { return key + '=\"' + value + '\"';}).join(' ');\n  return attrs ? ' ' + attrs : '';\n};\n\nmodule.exports = Attributes;\n},{}],3:[function(require,module,exports){\n/* global document */\nvar Attributes = require('./attributes');\nfunction camelToDash(string) {'use strict';\n  return (string[0] + string.substring(1).replace(/([A-Z])/g,'-$1')).toLowerCase();\n}\n/**\n * Element container\n * @class \n * @param {string} name - element tag name\n * @param {Element[]} [children] - child elements\n **/\nfunction Element(name, children) {'use strict';\n    if(!this) return new Element(name, children);\n    this.tag = camelToDash(name);\n    this.elements = children || [];\n    this.attributes = new Attributes();\n    this.textContent = \"\";\n}\n/**\n * Converts element to string\n **/\nElement.prototype.toString =\nElement.prototype.toHtml   = function() {'use strict';\n    return '<'+  this.tag + this.attributes.toString() + '>'+ \n    this.textContent + this.elements.map(function(element) {\n        return element.toString();\n    }).join('') + '</'+ this.tag + '>';\n};\n/**\n * Sets attribute\n * @param {string} key     - key to get or set\n * @param {string} [value] - the value to set\n **/\nElement.prototype.attr = function(key, value) {'use strict';\n    if(arguments.length !== 2) return this.attributes[key];\n    this.attributes[key] = value;\n    return this;\n};\n/**\n * Sets text\n * @param {string} [text] - text to set\n **/\nElement.prototype.text = function(text) {'use strict';\n    if(!arguments.length) return this.textContent;\n    this.textContent = text;\n    return this;\n};\n/**\n * Appends or replaces children\n * @param {Element[]} [children] - elements tp append or replace\n * @param {boolean} [replace] - should replace children\n **/\nElement.prototype.children = function(children, replace) {'use strict';\n    this.elements = replace ? children : this.elements.concat(children||[]); return this;\n};\n/**\n * Converts Element to dom structure (browser only)\n **/\nElement.prototype.toDom = function() {'use strict';\n    var element = document.createElement(this.tag);\n    element.textContent = this.textContent;\n    this.attributes.map(function(value, key) {\n        element.setAttribute(key, value);\n    });\n    this.elements.forEach(function(el) {\n        if(el instanceof Element) element.appendChild(el.toDom());\n    });\n    return element;\n};\n\nmodule.exports = Element;\n},{\"./attributes\":2}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}